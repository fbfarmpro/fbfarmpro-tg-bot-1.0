import os
from zipfile import ZipFile
from datetime import datetime

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import InputFile
from aiogram.utils.exceptions import ChatNotFound

import utils.database as database
import utils.keyboards as keyboards
from config import ADMIN_ID, PURCHASE_GIF_FILENAME
from handlers import *
from loader import storage


@dp.callback_query_handler(lambda c: int(database.users.get_banned(userID=c.from_user.id)))
async def _(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == "my_profile")
async def _(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    userID = callback_query.from_user.id
    lang = database.users.get_language(userID=userID)
    login = callback_query.from_user.mention if callback_query.from_user.username else callback_query.from_user.id
    balance = database.users.get_balance(userID=userID)
    if lang == "RU":
        await bot.send_message(userID, f"–í–∞—à –ª–æ–≥–∏–Ω: {login}\n–í–∞—à –±–∞–ª–∞–Ω—Å: `{balance} USD`",
                                   parse_mode="MarkdownV2")
    else:
        await bot.send_message(userID, f"Your login: {login}\nYour balance: `{balance} USD`",
                               parse_mode="MarkdownV2")


@dp.callback_query_handler(lambda c: c.data == "add_balance")
async def _(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    userID = callback_query.from_user.id
    lang = database.users.get_language(userID=userID)
    if lang == "RU":
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É", reply_markup=keyboards.COINS_MENU)
    else:
        await callback_query.message.answer("Choose coin", reply_markup=keyboards.COINS_MENU)


@dp.callback_query_handler(lambda c: c.data == "my_preorders")
async def _(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    userID = callback_query.from_user.id
    lang = database.users.get_language(userID=userID)
    if lang == "RU":
        await callback_query.message.answer("—É—Å–ª—É–≥–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —ç—Ç–∞–ø–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    else:
        await callback_query.message.answer("Developing...")


@dp.callback_query_handler(lambda c: c.data == "preorder")
async def _(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    lang = database.users.get_language(userID=callback_query.from_user.id)
    if lang == "RU":
        await bot.send_message(callback_query.from_user.id, "—É—Å–ª—É–≥–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —ç—Ç–∞–ø–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    else:
        await bot.send_message(callback_query.from_user.id, "Developing...")


@dp.callback_query_handler(lambda c: c.data == "purchase")
async def _(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    userID = callback_query.from_user.id
    lang = database.users.get_language(userID=userID)
    await storage.update_data(user=callback_query.from_user.id, data={"lang": lang})
    kb = InlineKeyboardMarkup(row_width=1)
    if lang == "RU":
        for category in database.products.get_categories():
            full_category_name = category
            category = category.split("|")[0]
            cat_text = "‚úÖ" + category + "‚úÖ" if database.products.get_count_of_products(full_category_name) else category
            kb.add(InlineKeyboardButton(text=cat_text, callback_data="category " + category))
    else:
        for category in database.products.get_categories():
            full_category_name = category
            category_en = category.split("|")[1]
            category_ru = category.split("|")[0]
            cat_text = "‚úÖ" + category_en + "‚úÖ" if database.products.get_count_of_products(full_category_name) else category_en
            print(full_category_name, "||||", category_ru, "|||", category_en, "|||", cat_text)
            kb.add(InlineKeyboardButton(text=cat_text, callback_data="category " + category_ru))
    if lang == "RU":
        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=kb)
    else:
        await callback_query.message.edit_text("Choose category", reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data.startswith("category "))
async def _(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    userID = callback_query.from_user.id
    category_name = " ".join(callback_query.data.split()[1::])
    full_category_name = None
    for category in database.products.get_categories():
        if category_name in category:
            full_category_name = category
            break
    userData = await storage.get_data(user=userID)
    userLang = userData["lang"]
    userBalance = database.users.get_balance(userID=userID)
    category_name = full_category_name.split("|")[0] if userLang == "RU" else full_category_name.split("|")[1]
    category_price = database.products.get_category_price(full_category_name)
    category_desc = database.products.get_category_description(full_category_name)
    count_of_products = database.products.get_count_of_products(full_category_name)
    if count_of_products == 0:
        if userLang == "RU":
            await callback_query.message.answer("–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        else:
            await callback_query.message.answer("No products in this category")
        return
    await storage.update_data(user=userID, data={
        "count_of_products": count_of_products,
        "category_name": full_category_name,
        "category_price": category_price,
        "user_balance": userBalance
    })
    formatted_category_desc = category_desc.replace("+", "\+").replace("-", "\-").replace(".", "\.").replace(",", "\,")
    if userLang == "RU":
        await callback_query.message.answer(f"""
üí•{category_name}
*–û–ø–∏—Å–∞–Ω–∏–µ:*
{category_desc.split('|')[0]}
--
*–î–æ—Å—Ç—É–ø–Ω–æ {count_of_products} —Ç–æ–≤–∞—Ä–∞ –ø–æ {category_price}$ –∫–∞–∂–¥—ã–π*
*–í–∞—à –±–∞–ª–∞–Ω—Å: {userBalance}$*""".replace("+", "\+").replace("-", "\-").replace(".", "\.").replace(",", "\,"),
                                            parse_mode="MarkdownV2")
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    else:
        await callback_query.message.answer(f"""
üí•{category_name}
*Description:*
{category_desc.split('|')[1]}
--
*Avaliable: {count_of_products} items at {category_price}$ each*
*Your balance: {userBalance}$*""".replace("+", "\+").replace("-", "\-").replace(".", "\.").replace(",", "\,"),
                                            parse_mode="MarkdownV2")
        await callback_query.message.answer("Enter count of products")
    await storage.set_state(user=userID, state="purchase_category_amount")

@dp.message_handler(lambda msg: msg.text.isdigit() and int(msg.text) != 0, state="purchase_category_amount")
async def _(message: types.Message, state: FSMContext):
    amount = int(message.text)
    userData = await state.get_data()
    userLang = userData["lang"]
    category_price = userData["category_price"]
    if amount == 0:
        if userLang == "RU":
            await message.answer("–ú–∏–Ω–∏–º—É–º 1")
        else:
            await message.answer("Min 1")
        await state.set_state("purchase_category_amount")
        return
    elif amount > int(userData["count_of_products"]):
        amount = int(userData["count_of_products"])
        if userLang == "RU":
            await message.answer(f"–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Å–µ–≥–æ {amount} –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –°—Ç–∞–≤–ª—é —Ç–∞–∫–æ–π –ª–∏–º–∏—Ç")
        else:
            await message.answer(f"There are only {amount} in this category. Limit changed")

    if userLang == "RU":
        await message.answer(f"–í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ {amount} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ {category_price}$ –∫–∞–∂–¥—ã–π.\n"
                             f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {amount*category_price}\n–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø–æ–∫—É–ø–∫—É?(–¥–∞/–Ω–µ—Ç)")
    else:
        await message.answer(f"You purchase {amount} products, which costs {category_price}$\n"
                             f"Final price: {amount*category_price}\nPurchase?(yes/no)")

    await state.update_data(data={"amount": amount})
    await state.set_state("purchase_accept")


@dp.message_handler(lambda msg: msg.text.lower() in ["–¥–∞", "yes", "no", "–Ω–µ—Ç"], state="purchase_accept")
async def _(message: types.Message, state: FSMContext):
    userID = message.from_user.id
    userData = await state.get_data()
    await state.finish()
    userLang = userData["lang"]
    userBalance = userData["user_balance"]
    amount = userData["amount"]
    category_price = userData["category_price"]
    category_name = userData["category_name"]
    if message.text.lower() in ["–¥–∞", "yes"]:
        if userBalance >= amount * category_price:
            database.users.add_balance(-(category_price * amount), userID=userID)
            zip_filename = database.create_random_filename_zip()
            zip_path = os.path.join("DB", "bought", zip_filename)
            zipObj = ZipFile(zip_path, "w")
            for file in database.products.get_N_products(category_name, amount):
                path = os.path.join("DB", category_name, file[0])
                zipObj.write(path, os.path.basename(path))
                database.products.set_isBought(file[0], category_name)
            zipObj.close()
            await message.answer_document(InputFile(zip_path))
            database.users.add_purchase(category_name, amount, category_price*amount, zip_filename, userID=userID)
            if userLang == "RU":
                await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n"
                                     "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ @fbfarmpro 09:00-19:00 gmt+3.",
                                     reply_markup=keyboards.MAIN_MENU_RU)
            else:
                await message.answer("Thank you for purchase!"
                                     "Support hours @fbfarmpro 09:00-19:00 gmt+3.",
                                     reply_markup=keyboards.MAIN_MENU_EN)
            await message.answer_animation(InputFile(PURCHASE_GIF_FILENAME))
            for admin in ADMIN_ID:
                try:
                    await bot.send_message(admin, text=f"{message.from_user.mention if message.from_user.username else userID} "
                                                       f"purchased {amount} files\n"
                                                       f"category: {category_name}\n"
                                                       f"price: {category_price*amount}$\n"
                                                       f"time: {datetime.now().isoformat()}")
                except ChatNotFound:
                    continue
        else:
            if userLang == "RU":
                await message.answer("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥.", reply_markup=keyboards.MAIN_MENU_RU)
            else:
                await message.answer("Not enough money", reply_markup=keyboards.MAIN_MENU_EN)
    else:
        if userLang == "RU":
            await message.answer("–û–∫.", reply_markup=keyboards.MAIN_MENU_RU)
        else:
            await message.answer("Okay.", reply_markup=keyboards.MAIN_MENU_EN)


@dp.callback_query_handler(lambda c: c.data == "rules")
async def _(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    lang = database.users.get_language(userID=callback_query.from_user.id)
    if lang == "RU":
        await callback_query.message.answer("""
‚ùóÔ∏è–ì–∞—Ä–∞–Ω—Ç–∏—è‚ùóÔ∏è

üõë –ó–∞–º–µ–Ω–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ª–∏—à—å –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø–æ–¥–≤–µ—Ä–≥–∞–ª—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏—è–º —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—è. üõë
üïê –ê–∫–∫–∞—É–Ω—Ç—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏. –í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–º–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ ‚Äî 3 –¥–Ω—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏. –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º —Å—Ä–∞–∑—É –∂–µ —Å–æ–æ–±—â–∞–π—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @fbfarmpro (09:00-19:00 gmt+3). üïê
üî¥ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–º–µ–Ω—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å :
- –ü—Ä–∏—á–∏–Ω—É –∑–∞–º–µ–Ω—ã.
- –°–∫—Ä–∏–Ω—à–æ—Ç.
- –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω–æ–º.
üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–º–µ–µ—Ç –ø–æ–ª–Ω–æ–µ –ø—Ä–∞–≤–æ –æ—Ç–∫–∞–∑–∞—Ç—å –≤ –∑–∞–º–µ–Ω–µ, –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å:
- –°–¥–µ–ª–∞–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–º–µ–Ω—É –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é 3-—Ö –¥–Ω–µ–π –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.  
‚õîÔ∏è –ù–µ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∫—É–ø–ª–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–∞–±–ª–∏–∫-—á–µ–∫–µ—Ä–æ–º, –ø–∞–±–ª–∏–∫-–ø—Ä–æ–∫—Å—è–º–∏, –∏–Ω–∞—á–µ –∏—Ö –º–æ–≥—É—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å! ‚õîÔ∏è
‚ùå –ü—Ä–∏–Ω—è—Ç—ã–π —Ç–æ–≤–∞—Ä –≤–æ–∑–≤—Ä–∞—Ç—É –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç, –∑–∞–º–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏.
‚ùóÔ∏è –ü—Ä–∏–æ–±—Ä–µ—Ç–∞–π—Ç–µ —Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.
‚ùóÔ∏è –ü–æ–∫—É–ø–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –í—ã —É–º–µ–µ—Ç–µ –∏ –∑–Ω–∞–µ—Ç–µ –∫–∞–∫ –∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è!
üö´ –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –í–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –≤–æ –≤—Ä–µ–º—è —Ñ–∞—Ä–º–∞, —ç—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –∑–∞–º–µ–Ω—ã!
‚ö†Ô∏è –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø–æ—á—Ç–∞ –≤ –∫–æ–º–ø–ª–µ–∫—Ç–µ –≤ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ - —ç—Ç–æ –Ω–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ–Ω—ã –∞–∫–∫–∞—É–Ω—Ç–∞ —Ñ–µ–π—Å–±—É–∫.
‚ö†Ô∏è –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤—ã –ø—Ä–∏–≤—è–∑–∞–ª–∏ –∫–∞—Ä—Ç—É –≤ –±–∏–ª–ª–∏–Ω–≥–µ –∏ –ø–æ–ª—É—á–∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É, —ç—Ç–æ –Ω–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ–Ω—ã –∞–∫–∫–∞—É–Ω—Ç–∞.
‚ö†Ô∏è –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏–µ fanpage, business manager, –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏, —ç—Ç–æ –Ω–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ–Ω—ã. (–ß–∞—Å—Ç–æ —ç—Ç–æ —è–≤–ª—è–µ—Ç—Å—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–º –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ –Ω–æ–≤–æ–º –∂–µ–ª–µ–∑–µ).
‚ùóÔ∏è –§–∞—Ä–º–æ–º –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è –ª—é–±—ã–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ.
‚ö†Ô∏è –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ —Ñ–µ–π—Å–±—É–∫ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å business manager - —ç—Ç–æ –Ω–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ–Ω—ã –∞–∫–∫–∞—É–Ω—Ç–∞.
üîû –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤—ã –ø—Ä–∏–≤—è–∑–∞–ª–∏ –∫ –∞–∫–∫–∞—É–Ω—Ç—É business manager –∏ –ø–æ –∫–∞–∫–∏–º –ª–∏–±–æ –ø—Ä–∏—á–∏–Ω–∞–º —Ñ–µ–π—Å–±—É–∫ –Ω–µ –¥–∞–µ—Ç –≤–∞–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å business manager (–ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å —Ç—É–¥–∞ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã –∏ –ø—Ä–æ—á–µ–µ, –ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ñ–µ–π—Å–±—É–∫–∞) - —ç—Ç–æ –Ω–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ–Ω—ã –∞–∫–∫–∞—É–Ω—Ç–∞.
""")
    else:
        await callback_query.message.answer("""
‚ùóÔ∏èWarranty‚ùóÔ∏è

üõë Replacement only if the account has not been modified by the buyer. üõë
üïê Accounts are checked immediately after purchase. The time to check and request a replacement is limited to 3 days after purchase. Report to support @fbfarmpro (09:00-19:00 gmt+3) immediately if you have any problems. üïê
üî¥ A replacement is required to provide :
- Reason for Substitution.
- Screenshot.
- Original file provided by the store.
üí¨ Support has the full right to refuse a replacement if the customer:
- Made a request for a replacement after 3 days after purchasing the account.  
‚õîÔ∏è Do not check purchased accounts with public checker, public proxies, otherwise they can be blocked! ‚õîÔ∏è
‚ùå Received merchandise cannot be returned, replacement only with accounts.
‚ùóÔ∏è Purchase as much as you can use in the near future.
‚ùóÔ∏è Buy accounts only if you know how to use them!
üö´ In case you get blocked while farming, this is not grounds for replacement!
‚ö†Ô∏è In the event that your mail is bundled in a blocked account, this is not grounds for a replacement Facebook account.
‚ö†Ô∏è In case you linked a card in billing and got a lock, that's not grounds for replacing the account.
‚ö†Ô∏è If your account is blocked after creating a fanpage, business manager, this is not grounds for replacement. (This is often a trigger for an account on new iron).
‚ùóÔ∏è Farming an account means any action on the account.
‚ö†Ô∏è If you can't create a business manager on a Facebook account, that's not a reason to replace the account.
If you have linked business manager to your account and for some reason Facebook does not let you fully work with business manager (link advertising accounts there, etc., write to Facebook technical support) - this is not the reason for account replacement.
""")


@dp.callback_query_handler(lambda c: c.data == "purchase_history")
async def _(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    userID = str(callback_query.from_user.id)
    lang = database.users.get_language(userID=userID)
    purchases = filter(lambda t: int(t[0]) == int(userID), database.users.get_purchases())
    if purchases:
        if lang == "RU":
            result = f"\n\n".join(f"–î–∞—Ç–∞: {t[2]}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {t[3].split('|')[0]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {t[4]}\n–¶–µ–Ω–∞: {t[5]}" for t in purchases)
            await callback_query.message.answer(result or "–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç–∞")
        else:
            result = f"\n\n".join(f"Date: {t[2]}\nCategory: {t[3].split('|')[-1]}\nAmount: {t[4]}\nPrice: {t[5]}" for t in purchases)
            await callback_query.message.answer(result or "Your purchase history is empty")


@dp.callback_query_handler(lambda c: c.data == "language")
async def _(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    userID = callback_query.from_user.id
    lang = database.users.get_language(userID=userID)
    if lang == "RU":
        await callback_query.message.edit_text("Main menu")
        await callback_query.message.edit_reply_markup(keyboards.MAIN_MENU_EN)
    else:
        await callback_query.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        await callback_query.message.edit_reply_markup(keyboards.MAIN_MENU_RU)
    database.users.change_language(userID=userID)
